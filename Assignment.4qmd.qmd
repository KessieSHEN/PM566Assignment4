---
title: "Assignment04"
format: html
author: Kessie SHEN
embed-resources: true
---




## Make things run faster
```{r}
# Original
fun1 <- function(mat) {
  n <- nrow(mat)
  ans <- double(n) 
  for (i in 1:n) {
    ans[i] <- sum(mat[i, ])
  }
  ans
}

# Optimized
fun1alt <- function(mat) {
  rowSums(mat)
}
# Original
# Cumulative sum by row
fun2 <- function(mat) {
  n <- nrow(mat)
  k <- ncol(mat)
  ans <- mat
  for (i in 1:n) {
    for (j in 2:k) {
      ans[i,j] <- mat[i, j] + ans[i, j - 1]
    }
  }
  ans
}
# Optimized
fun2alt <- function(mat) {
  t(apply(mat, 1, cumsum))
}

```

## Question 1
Using the dataset generated below (dat), check that the output of both of your new functions matches the output of the original functions. Then use microbenchmark to check that your version is actually faster.

```{r}
# Use the data with this code
set.seed(2315)
dat <- matrix(rnorm(200 * 100), nrow = 200)

# Test for the first
microbenchmark::microbenchmark(
  fun1(dat),
  fun1alt(dat), unit = "relative"
)

# Test for the second
microbenchmark::microbenchmark(
  fun2(dat),
  fun2alt(dat), unit = "relative"
)

# Make things run faster with parallel computing
#The following function allows simulating pi:
sim_pi <- function(n = 1000, i = NULL) {
  p <- matrix(runif(n*2), ncol = 2)
  mean(rowSums(p^2) < 1) * 4
}

# Here is an example of the run
set.seed(156)
sim_pi(1000) # 3.132
#In order to get accurate estimates, we can run this function multiple times, with the following code:

# This runs the simulation a 4,000 times, each with 10,000 points
set.seed(1231)
system.time({
  ans <- unlist(lapply(1:4000, sim_pi, n = 10000))
  print(mean(ans))
})
```
# Question 2 Rewrite the previous code using parLapply() (or your parallelization method of choice) to parallelize it. Run the code once, using system.time(), to show that your version is faster.
```{r}
# Load the parallel library
library(parallel)

# Define the simulation function
sim_pi <- function(n = 1000, i = NULL) {
  p <- matrix(runif(n * 2), ncol = 2)
  mean(rowSums(p^2) < 1) * 4
}

# Set up the parallel cluster
cl <- makeCluster(detectCores() - 1) # Use all cores minus one

# Run the simulation in parallel
set.seed(1231)
system.time({
  ans <- unlist(parLapply(cl, 1:4000, sim_pi, n = 10000))
  print(mean(ans))
})

# Stop the cluster
stopCluster(cl)
```
## SQL Setup a temporary database by running the following chunk
```{r}
# install.packages(c("RSQLite", "DBI"))

library(RSQLite)
library(DBI)

# Initialize a temporary in memory database
con <- dbConnect(SQLite(), ":memory:")

# Download tables
film <- read.csv("https://raw.githubusercontent.com/ivanceras/sakila/master/csv-sakila-db/film.csv")
film_category <- read.csv("https://raw.githubusercontent.com/ivanceras/sakila/master/csv-sakila-db/film_category.csv")
category <- read.csv("https://raw.githubusercontent.com/ivanceras/sakila/master/csv-sakila-db/category.csv")

# Copy data.frames to database
dbWriteTable(con, "film", film)
dbWriteTable(con, "film_category", film_category)
dbWriteTable(con, "category", category)
```
## Question.3 How many many movies are available in each rating category? 223,210,195,194,180,

```{r}
query <- "
SELECT 
    rating, 
    COUNT(*) AS movie_count
FROM 
    film
GROUP BY 
    rating
ORDER BY 
    movie_count DESC
"

result <- dbGetQuery(con, query)
print(result)
```
## Question.4 What is the average replacement cost and rental rate for each rating category? 
```{sql, connection = con}
SELECT 
    rating, 
    AVG(replacement_cost) AS avg_replacement_cost, 
    AVG(rental_rate) AS avg_rental_rate
FROM 
    film
GROUP BY 
    rating
ORDER BY 
    rating;


```

## Question.5 Use table film_category together with film to find how many films there are with each category ID.
```{sql, connection = con}
SELECT 
    fc.category_id, 
    COUNT(*) AS film_count
FROM 
    film_category fc
JOIN 
    film f 
ON 
    fc.film_id = f.film_id
GROUP BY 
    fc.category_id
ORDER BY 
    film_count DESC;

```
## Question.6 Incorporate the category table into the answer to the previous question to find the name of the most popular category.
```{sql, connection = con}
SELECT 
    c.name AS category_name, 
    COUNT(fc.film_id) AS film_count
FROM 
    film_category fc
JOIN 
    film f 
ON 
    fc.film_id = f.film_id
JOIN 
    category c 
ON 
    fc.category_id = c.category_id
GROUP BY 
    c.name
ORDER BY 
    film_count DESC
LIMIT 1;


```
